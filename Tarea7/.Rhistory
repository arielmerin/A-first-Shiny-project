hist(runif(100,-2,5), xlab = "valores jajsj", col = "hotpink", freq = FALSE, main = "Histograma") # Da un n
Mivolado <- function(p){
U <- runif(1,0,1)
resultado <- 0
if(U < p){
return(1)
}else{
return(0)
}
}
conteo <- 0
N<- 30000
P <- .35
for (i in 1:N) {
resultado <- Mivolado(P)
conteo <- conteo + resultado
}
proba = conteo/N
print(proba)
hist(runif(100,-2,5), xlab = "valores jajsj", col = "hotpink", freq = FALSE, main = "Histograma") # Da un n
Mivolado <- function(p){
U <- runif(1,0,1)
resultado <- 0
if(U < p){
return(1)
}else{
return(0)
}
}
conteo <- 0
N<- 30000
P <- .35
for (i in 1:N) {
resultado <- Mivolado(P)
conteo <- conteo + resultado
}
proba = conteo/N
print(proba)
hist(runif(100,-2,5), xlab = "valores jajsj", col = "hotpink", freq = FALSE, main = "Histograma") # Da un n
Mivolado <- function(p){
U <- runif(1,0,1)
resultado <- 0
if(U < p){
return(1)
}else{
return(0)
}
}
conteo <- 0
N<- 30000
P <- .35
for (i in 1:N) {
resultado <- Mivolado(P)
conteo <- conteo + resultado
}
proba = conteo/N
print(proba)
hist(runif(100,-2,5), xlab = "valores jajsj", col = "hotpink", freq = FALSE, main = "Histograma") # Da un n
Mivolado <- function(p){
U <- runif(1,0,1)
resultado <- 0
if(U < p){
return(1)
}else{
return(0)
}
}
conteo <- 0
N<- 30000
P <- .35
for (i in 1:N) {
resultado <- Mivolado(P)
conteo <- conteo + resultado
}
proba = conteo/N
print(proba)
hist(runif(100,-2,5), xlab = "valores jajsj", col = "hotpink", freq = FALSE, main = "Histograma") # Da un n
Mivolado <- function(p){
U <- runif(1,0,1)
resultado <- 0
if(U < p){
return(1)
}else{
return(0)
}
}
conteo <- 0
N<- 30000
P <- .35
for (i in 1:N) {
resultado <- Mivolado(P)
conteo <- conteo + resultado
}
proba = conteo/N
print(proba)
hist(runif(100,-2,5), xlab = "valores jajsj", col = "hotpink", freq = FALSE, main = "Histograma") # Da un n
Mivolado <- function(p){
U <- runif(1,0,1)
resultado <- 0
if(U < p){
return(1)
}else{
return(0)
}
}
conteo <- 0
N<- 30000
P <- .35
for (i in 1:N) {
resultado <- Mivolado(P)
conteo <- conteo + resultado
}
proba = conteo/N
print(proba)
hist(runif(100,-2,5), xlab = "valores jajsj", col = "hotpink", freq = FALSE, main = "Histograma") # Da un n
Mivolado <- function(p){
U <- runif(1,0,1)
resultado <- 0
if(U < p){
return(1)
}else{
return(0)
}
}
conteo <- 0
N<- 30000
P <- .35
for (i in 1:N) {
resultado <- Mivolado(P)
conteo <- conteo + resultado
}
proba = conteo/N
print(proba)
hist(runif(100,-2,5), xlab = "valores jajsj", col = "hotpink", freq = FALSE, main = "Histograma") # Da un n
Mivolado <- function(p){
U <- runif(1,0,1)
resultado <- 0
if(U < p){
return(1)
}else{
return(0)
}
}
conteo <- 0
N<- 30000
P <- .35
for (i in 1:N) {
resultado <- Mivolado(P)
conteo <- conteo + resultado
}
proba = conteo/N
print(proba)
A = list([1,0], [-1,0], [0,1], [0,-1])
A = list(c(1,0), c(-1,0), c(0,1), c(0,-1))
randomA <- function(A){
U < runif(1,0,1)
pasito <- c(0,0)
if(U < 0.25){
pasito <- A[[1]]
}
}
randomA <- function(A){
U < runif(1,0,1)
pasito <- c(0,0)
if(U < 0.25){
pasito <- A[[1]]
}
}
shiny::runApp('Tarea7[ProbaI]/Tarea7')
runApp('Tarea7[ProbaI]/Tarea7')
runApp('Tarea7[ProbaI]/Tarea7')
install.packages(shinyapps)
install.packages("devtools")
runApp('Tarea7[ProbaI]/Tarea7')
runApp('Tarea7[ProbaI]/Tarea7')
runApp('Tarea7[ProbaI]/Tarea7')
output$par <- renderText({"hola mundo" })
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('Tarea7[ProbaI]/Tarea7')
runApp('Tarea7[ProbaI]/Tarea7')
runApp('Tarea7[ProbaI]/Tarea7')
runApp('Tarea7[ProbaI]/Tarea7')
runApp('Tarea7[ProbaI]/Tarea7')
runApp('Tarea7[ProbaI]/Tarea7')
shiny::runApp('Tarea7[ProbaI]/Tarea7')
runApp('Tarea7[ProbaI]/Tarea7')
paridades <- function(numerito){
if(numerito %% 2 == 0 ){
return("par")
}else{
return("impar")
}
}
paridades <- function(numerito){
if(numerito %% 2 == 0 ){
return("par")
}else{
return("impar")
}
}
paridades(3)
runApp('Tarea7[ProbaI]/Tarea7')
runApp()
runApp('Tarea7[ProbaI]/Tarea7')
definirDireccion <- function(probaArriba, probaAbajo, probaDerecha, probaIzquierda){
unity <- runif(1,0,1)
step <- c(0,0)
suma = probaAbajo + probaArriba + probaDerecha + probaIzquierda
if (suma != 1) {
print("tas mal chavo")
print(suma)
}
if( 0 < unity && unity < probaArriba){
step <- c(1,0)
}
}
definirDireccion(.7,.1,.1,.1)
definirDireccion <- function(probaArriba, probaAbajo, probaDerecha, probaIzquierda){
unity <- runif(1,0,1)
step <- c(0,0)
suma = probaAbajo + probaArriba + probaDerecha + probaIzquierda
if (suma < 1) {
print("tas mal chavo")
print(suma)
}
if( 0 < unity && unity < probaArriba){
step <- c(1,0)
}
}
definirDireccion(.7,.1,.1,.1)
definirDireccion <- function(probaArriba, probaAbajo, probaDerecha, probaIzquierda){
unity <- runif(1,0,1)
step <- c(0,0)
suma = probaAbajo + probaArriba + probaDerecha + probaIzquierda
if (suma < 0.99) {
print("tas mal chavo")
print(suma)
}
if( 0 < unity && unity < probaArriba){
step <- c(1,0)
}
}
definirDireccion(.7,.1,.1,.1)
definirDireccion <- function(probaArriba, probaAbajo, probaDerecha, probaIzquierda){
unity <- runif(1,0,1)
step <- c(0,0)
suma = probaAbajo + probaArriba + probaDerecha + probaIzquierda
if (suma < 0.9999) {
print("tas mal chavo")
print(suma)
}else{
print(" jaja q loco")
}
if( 0 < unity && unity < probaArriba){
step <- c(1,0)
}
}
}
definirDireccion <- function(probaArriba, probaAbajo, probaDerecha, probaIzquierda){
unity <- runif(1,0,1)
step <- c(0,0)
suma = probaAbajo + probaArriba + probaDerecha + probaIzquierda
if (suma < 0.9999) {
print("tas mal chavo")
print(suma)
}else{
print(" jaja q loco")
}
if( 0 < unity && unity < probaArriba){
step <- c(1,0)
}
}
definirDireccion(.7,.1,.1,.1)
definirDireccion <- function(probaIzquierda, probaDerecha, probaAbajo, probaArriba){
unity <- runif(1,0,1)
step <- c(0,0)
suma = probaAbajo + probaArriba + probaDerecha + probaIzquierda
if( unity < probaIzquierda){
#Se va izquierda
return(c(-1,0))
}
if(unity < probaIzquierda + probaDerecha){
#Se va derecha
return(c(1,0))
}
if(unity < probaAbajo + probaIzquierda + probaDerecha){
#Se va abajo
return(c(0,-1))
}
#Se va arriba
return(c(0,1))
}
camino <- function(pasos,probaIzquierda, probaDerecha, probaAbajo, probaArriba,x,y){
inicio <-c(x,y)
xs <- c(x)
ys <- c(y)
for (i in 1:pasos) {
nuevoPaso <- definirDireccion(probaIzquierda, probaDerecha, probaAbajo, probaArriba)
inicio <- inicio + nuevoPaso
xs <-append(xs, inicio[1])
ys <- append(ys, inicio[2])
}
return(list(xs, ys))
}
trayecto1 <- camino(1000, 0.25,0.25, 0.25, 0.25, 0, 0)
trayecto1
plot(trayecto1[[1]], trayecto1[[2]], type = 1, col= "blue")
plot(trayecto1[[1]], trayecto1[[2]], type = "l", col= "blue")
definirDireccion <- function(probaIzquierda, probaDerecha, probaAbajo, probaArriba){
unity <- runif(1,0,1)
step <- c(0,0)
suma = probaAbajo + probaArriba + probaDerecha + probaIzquierda
if( unity < probaIzquierda){
#Se va izquierda
return(c(-1,0))
}
if(unity < probaIzquierda + probaDerecha){
#Se va derecha
return(c(1,0))
}
if(unity < probaAbajo + probaIzquierda + probaDerecha){
#Se va abajo
return(c(0,-1))
}
#Se va arriba
return(c(0,1))
}
camino <- function(pasos,probaIzquierda, probaDerecha, probaAbajo, probaArriba,x,y){
inicio <-c(x,y)
xs <- c(x)
ys <- c(y)
for (i in 1:pasos) {
nuevoPaso <- definirDireccion(probaIzquierda, probaDerecha, probaAbajo, probaArriba)
inicio <- inicio + nuevoPaso
xs <-append(xs, inicio[1])
ys <- append(ys, inicio[2])
}
return(list(xs, ys))
}
trayecto1 <- camino(10000, 0.25,0.25, 0.25, 0.25, 0, 0)
plot(trayecto1[[1]], trayecto1[[2]], type = "l", col= "blue")
definirDireccion <- function(probaIzquierda, probaDerecha, probaAbajo, probaArriba){
unity <- runif(1,0,1)
step <- c(0,0)
suma = probaAbajo + probaArriba + probaDerecha + probaIzquierda
if( unity < probaIzquierda){
#Se va izquierda
return(c(-1,0))
}
if(unity < probaIzquierda + probaDerecha){
#Se va derecha
return(c(1,0))
}
if(unity < probaAbajo + probaIzquierda + probaDerecha){
#Se va abajo
return(c(0,-1))
}
#Se va arriba
return(c(0,1))
}
camino <- function(pasos,probaIzquierda, probaDerecha, probaAbajo, probaArriba,x,y){
inicio <-c(x,y)
xs <- c(x)
ys <- c(y)
for (i in 1:pasos) {
nuevoPaso <- definirDireccion(probaIzquierda, probaDerecha, probaAbajo, probaArriba)
inicio <- inicio + nuevoPaso
xs <-append(xs, inicio[1])
ys <- append(ys, inicio[2])
}
return(list(xs, ys))
}
trayecto1 <- camino(10000, 0.7,0.1, 0.1, 0.1, 0, 0)
plot(trayecto1[[1]], trayecto1[[2]], type = "l", col= "blue")
definirDireccion <- function(probaIzquierda, probaDerecha, probaAbajo, probaArriba){
unity <- runif(1,0,1)
step <- c(0,0)
suma = probaAbajo + probaArriba + probaDerecha + probaIzquierda
if( unity < probaIzquierda){
#Se va izquierda
return(c(-1,0))
}
if(unity < probaIzquierda + probaDerecha){
#Se va derecha
return(c(1,0))
}
if(unity < probaAbajo + probaIzquierda + probaDerecha){
#Se va abajo
return(c(0,-1))
}
#Se va arriba
return(c(0,1))
}
camino <- function(pasos,probaIzquierda, probaDerecha, probaAbajo, probaArriba,x,y){
inicio <-c(x,y)
xs <- c(x)
ys <- c(y)
for (i in 1:pasos) {
nuevoPaso <- definirDireccion(probaIzquierda, probaDerecha, probaAbajo, probaArriba)
inicio <- inicio + nuevoPaso
xs <-append(xs, inicio[1])
ys <- append(ys, inicio[2])
}
return(list(xs, ys))
}
trayecto1 <- camino(10000, 0.1,0.7, 0.1, 0.1, 0, 0)
plot(trayecto1[[1]], trayecto1[[2]], type = "l", col= "blue")
trayecto1 <- camino(10000, 0.1,0.1, 0.7, 0.1, 0, 0)
plot(trayecto1[[1]], trayecto1[[2]], type = "l", col= "blue")
trayecto1 <- camino(10000, 0.1,0.1, 0.1, 0.7, 0, 0)
plot(trayecto1[[1]], trayecto1[[2]], type = "l", col= "blue")
lines(trayecto1[[1]], trayecto1[[2]], type = "l", col= "blue")
lines(trayecto1[[1]], trayecto1[[2]], type = "l", col= "blue")
plot(trayecto1[[1]], trayecto1[[2]], type = "l", col= "blue")
lines(trayecto1[[1]], trayecto1[[2]], type = "l", col= "blue")
runApp('Tarea7[ProbaI]/Tarea7')
runApp('Tarea7[ProbaI]/Tarea7')
trayecto1 <- camino(10000, 0.1,0.1, 0.1, 0.7, 0, 0)
shiny::runApp('Tarea7[ProbaI]/Tarea7')
runApp()
runApp('Tarea7[ProbaI]/Tarea7')
plot(dice(10,4))
plot(dice(10,4))
server <- function(input, output) {
paridades <- function(numerito){
if (is.na(numerito)) {
return("  ")
}
numero <- as.integer(numerito)
if((numero %% 2) == 0 ){
return("par")
}else{
return("impar")
}
}
definirDireccion <- function(probaIzquierda, probaDerecha, probaAbajo, probaArriba){
unity <- runif(1,0,1)
step <- c(0,0)
suma = probaAbajo + probaArriba + probaDerecha + probaIzquierda
if( unity < probaIzquierda){
#Se va izquierda
return(c(-1,0))
}
if(unity < probaIzquierda + probaDerecha){
#Se va derecha
return(c(1,0))
}
if(unity < probaAbajo + probaIzquierda + probaDerecha){
#Se va abajo
return(c(0,-1))
}
#Se va arriba
return(c(0,1))
}
camino <- function(pasos, probaIzquierda, probaDerecha, probaAbajo, probaArriba,x,y){
inicio <-c(x,y)
xs <- c(x)
ys <- c(y)
for (i in 1:pasos) {
nuevoPaso <- definirDireccion(probaIzquierda, probaDerecha, probaAbajo, probaArriba)
inicio <- inicio + nuevoPaso
xs <-append(xs, inicio[1])
ys <- append(ys, inicio[2])
}
return(list(xs, ys))
}
output$plot1 <- renderPlot({
trayecto1 <- camino(input$pasos[2],
input$probaIzquierda,
input$probaDerecha,
input$probaAbajo,
input$probaArriba,
input$xOrigen,
input$yOrigen)
plot(trayecto1[[1]], trayecto1[[2]], main="Recorrido del caminante", ylab = " ", xlab = " ",
type = "l", col= input$color)
})
output$answer <- renderText(paridades(input$paridad))
output$histograma <- renderPlot({
dice <- sample(1:input$caras, input$dado[2], replace=TRUE)
# calculate the sum of simluated dice rolls
dice_sum <- sum(dice)
# calculate the average outcome
result <- dice_sum/input$dado[2]
# draw a histogram with a density plot
hist(dice, breaks=seq(0,input$caras, 1),
probability = TRUE,
main = "Tirar un dado",
xlab = "Número de caras",
col = rainbow(6))
lines(density(dice))
})
output$logo <- renderImage({
list(src = "ciencias.png", height = 120, width = 100)
})
}
shiny::runApp('Tarea7[ProbaI]/Tarea7')
setwd("~/Tarea7[ProbaI]/Tarea7")
